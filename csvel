#!/usr/bin/env python3

import csv
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QAction, QFileDialog, QPushButton, QHeaderView, QMenu, QInputDialog, QMessageBox
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon

from openpyxl import load_workbook


class CSVEditor(QMainWindow):
    def __init__(self):
        super().__init__()

        self.clipboard = []
        self.undo_cache = [] # For undo
        self.redo_cache = [] # For redo
        self.HISTORY_CONST = 5

        self.is_row_ripple_edit = False # This is for pasting that moves things around them away, like inserting a column and row
        self.is_column_ripple_edit = False

        self.init_ui()

    def init_ui(self):
        self.setWindowTitle("CSVEL")

        self.setWindowIcon(QIcon("icon.svg"))

        css = open("style.css", "r").read()
        self.setStyleSheet(css)

        self.table = QTableWidget(self)
        self.setCentralWidget(self.table)

        # Context Menu
        self.table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)

        self.table.installEventFilter(self) # for keyboard shortcuts

        self.file_path = None
        self.data = []

        self.create_menu()
        self.create_toolbar()
        self.new_csv() # initialize table with 100 rows and columns

        # start maximized
        self.showMaximized()

    def create_menu(self):
        menubar = self.menuBar()

        file_menu = menubar.addMenu("File")

        new_action = QAction("New (Ctrl+N)", self)
        new_action.triggered.connect(self.new_csv)
        file_menu.addAction(new_action)

        open_action = QAction("Open (Ctrl+O)", self)
        open_action.triggered.connect(self.open)
        file_menu.addAction(open_action)

        save_action = QAction("Save (Ctrl+S)", self)
        save_action.triggered.connect(self.save_csv)
        file_menu.addAction(save_action)

        save_as_action = QAction("Save As (Ctrl+Shift+S)", self)
        save_as_action.triggered.connect(self.save_as_csv)
        file_menu.addAction(save_as_action)

        edit_menu = menubar.addMenu("Edit")

        undo_action = QAction("Undo (Ctrl+Z)", self)
        undo_action.triggered.connect(self.undo)
        edit_menu.addAction(undo_action)

        redo_action = QAction("Redo (Ctrl+Shift+Z)", self)
        redo_action.triggered.connect(self.redo)
        edit_menu.addAction(redo_action)

        # add separator line
        edit_menu.addSeparator()

        delete_column_action = QAction("Delete Columns (Del)", self)
        delete_column_action.triggered.connect(self.delete_selected_columns)
        edit_menu.addAction(delete_column_action)

        delete_row_action = QAction("Delete Rows (Del)", self)
        delete_row_action.triggered.connect(self.delete_selected_rows)
        edit_menu.addAction(delete_row_action)

        add_row_action = QAction("Add Row", self)
        add_row_action.triggered.connect(self.add_row)
        edit_menu.addAction(add_row_action)

        add_column_action = QAction("Add Column", self)
        add_column_action.triggered.connect(self.add_column)
        edit_menu.addAction(add_column_action)

        add_column_at_index_action = QAction("Add Column At Selection", self)
        add_column_at_index_action.triggered.connect(self.add_column_at_index)
        edit_menu.addAction(add_column_at_index_action)

        add_row_at_index_action = QAction("Add Row At Selection", self)
        add_row_at_index_action.triggered.connect(self.add_row_at_index)
        edit_menu.addAction(add_row_at_index_action)

        # add separator line
        edit_menu.addSeparator()

        resize_to_data_action = QAction("Resize to Data (Ctrl+Shift+F)", self)
        resize_to_data_action.triggered.connect(self.fit_to_data)
        edit_menu.addAction(resize_to_data_action)

        view_menu = menubar.addMenu("View")

        autosize_cells_action = QAction("Autosize Cells", self)
        autosize_cells_action.triggered.connect(self.table.resizeRowsToContents)
        autosize_cells_action.triggered.connect(self.table.resizeColumnsToContents)
        view_menu.addAction(autosize_cells_action)

    def create_toolbar(self):
        toolbar = self.addToolBar("Toolbar")

        add_row_button = QPushButton("Add Row", self)
        add_row_button.clicked.connect(self.add_row)
        toolbar.addWidget(add_row_button)

        add_column_button = QPushButton("Add Column", self)
        add_column_button.clicked.connect(self.add_column)
        toolbar.addWidget(add_column_button)

    def open(self):
        file_dialog = QFileDialog(self)
        # set name filter to csv and xlsx files
        file_dialog.setNameFilter("CSV Files (*.csv);;Excel Files (*.xlsx)")
        file_dialog.setDefaultSuffix("csv")
        file_path, _ = file_dialog.getOpenFileName()

        if file_path:
            self.setWindowTitle("CSVEL - " + file_path)
            if file_path.endswith(".xlsx"):
                self.open_xlsx(file_path)
                return

            self.file_path = file_path
            self.data = []
            with open(file_path, "r") as file:
                reader = csv.reader(file)
                for row in reader:
                    self.data.append(row)

            self.display_table()
    
    def open_xlsx(self, file_path):
        # Show popup to confirm that opening an xlsx file will convert it to csv and may lose data
        msg = "Opening an xlsx file will convert it to csv and may lose data. Continue?"
        reply = QMessageBox.question(self, 'Warning', msg, QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.No:
            return

        try:
            workbook = load_workbook(filename=file_path)
            sheets = workbook.sheetnames

            if len(sheets) >= 2:
                sheet, ok = QInputDialog.getItem(self, "Select Sheet", "Sheet:", sheets, 0, False)

                if ok:
                    sheet = workbook[sheet]
                    self.data = []
                    for row in sheet.iter_rows(values_only=True):
                        self.data.append(list(row))
                    self.display_table()

            else:
                # Get default active sheet
                sheet = workbook.active
                self.data = []
                for row in sheet.iter_rows(values_only=True):
                    self.data.append(list(row))
                self.display_table()

        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to open XLSX file: {str(e)}")

    def save_csv(self):
        if self.file_path:
            with open(self.file_path, "w", newline="") as file:
                writer = csv.writer(file)
                writer.writerows(self.get_table_data())
        else:
            self.save_as_csv()
            
    def save_as_csv(self):
        file_dialog = QFileDialog(self)
        file_dialog.setNameFilter("CSV Files (*.csv)")
        file_dialog.setDefaultSuffix("csv")
        file_path, _ = file_dialog.getSaveFileName()

        if file_path:
            self.file_path = file_path
            with open(file_path, "w", newline="") as file:
                writer = csv.writer(file)
                writer.writerows(self.get_table_data())

    def new_csv(self):
        self.table.clear()
        self.file_path = None
        self.data = []
        self.table.setRowCount(100)
        self.table.setColumnCount(100)

    def eventFilter(self, obj, event):
        if obj == self.table and event.type() == event.KeyPress:
            if event.key() == Qt.Key_Delete:
                # if every cell in a column is selected, delete the column
                selected_columns = set()
                for cell in self.table.selectedItems():
                    selected_columns.add(cell.column())
                if len(selected_columns) == self.table.columnCount():
                    self.delete_columns(selected_columns)
                # if every cell in a row is selected, delete the row
                selected_rows = set()
                for cell in self.table.selectedItems():
                    selected_rows.add(cell.row())
                if len(selected_rows) == self.table.rowCount():
                    self.table.removeRow(list(selected_rows)[0])
                return True
            
            elif event.key() == Qt.Key_Return:
                # stop typing and select current cell
                self.table.setCurrentCell(self.table.currentRow(), self.table.currentColumn())
                return True
            
            elif event.key() == Qt.Key_Tab:
                # stop typing and select next cell
                self.table.setCurrentCell(self.table.currentRow(), self.table.currentColumn())
                return True
            
            elif event.key() == Qt.Key_Backspace:
                # remove text from selected cells
                for cell in self.table.selectedItems():
                    cell.setText('')
                return True
            
            elif event.key() == Qt.Key_A and event.modifiers() == Qt.ControlModifier:
                # select all cells
                self.table.selectAll()
                return True
            
            elif event.key() == Qt.Key_S and event.modifiers() == Qt.ControlModifier:
                # save
                self.save_csv()
                return True
            
            elif event.key() == Qt.Key_S and event.modifiers() == (Qt.ControlModifier | Qt.ShiftModifier):
                # save as
                self.save_as_csv()
                return True
            
            elif event.key() == Qt.Key_O and event.modifiers() == Qt.ControlModifier:
                # open
                self.open()
                return True
            
            elif event.key() == Qt.Key_N and event.modifiers() == Qt.ControlModifier:
                # new
                self.new_csv()
                return True
            
            elif event.key() == Qt.Key_F and event.modifiers() == (Qt.ControlModifier | Qt.ShiftModifier):
                self.fit_to_data()
                return True
            
            elif event.key() == Qt.Key_Z and event.modifiers() == Qt.ControlModifier:
                self.undo()
                return True
            
            elif event.key() == Qt.Key_Z and event.modifiers() == (Qt.ControlModifier | Qt.ShiftModifier):
                self.redo()
                return True
            
            # update cache
            if len(self.undo_cache) > self.HISTORY_CONST:
                #left shift and remove the [0]
                pass
            
            print(self.undo_cache)

            self.undo_cache.append(self.table)
            self.redo_cache.clear()


            

            
        return super().eventFilter(obj, event)
    
    def show_context_menu(self, position):
        menu = QMenu(self.table)
        
        delete_column_action = QAction("Delete Columns", self)
        delete_column_action.triggered.connect(self.delete_selected_columns)
        menu.addAction(delete_column_action)

        delete_row_action = QAction("Delete Rows", self)
        delete_row_action.triggered.connect(self.delete_selected_rows)
        menu.addAction(delete_row_action)

        add_row_at_index = QAction("Add Row At Selection", self)
        add_row_at_index.triggered.connect(self.add_row_at_index)
        menu.addAction(add_row_at_index)

        add_column_at_index = QAction("Add Column At Selection", self)
        add_column_at_index.triggered.connect(self.add_column_at_index)
        menu.addAction(add_column_at_index)

        menu.exec_(self.table.viewport().mapToGlobal(position))

    def delete_selected_columns(self):
        selected_columns = set(index.column() for index in self.table.selectedIndexes())
        if selected_columns:
            self.delete_columns(selected_columns)

    def delete_columns(self, columns):
        sorted_columns = sorted(columns, reverse=True)
        for column in sorted_columns:
            self.table.removeColumn(column)
            
    def delete_selected_rows(self):
        selected_rows = set(index.row() for index in self.table.selectedIndexes())
        if selected_rows:
            self.delete_rows(selected_rows)

    def delete_rows(self, rows):
        sorted_rows = sorted(rows, reverse=True)
        for row in sorted_rows:
            self.table.removeRow(row)

    def adjust_columns(self):
        for column in range(self.table.columnCount()):
            self.table.horizontalHeader().setSectionResizeMode(column, QHeaderView.Stretch)

    def fit_to_data(self):
        # resize rows and columns to fit data
        # find furthest right column with data
        max_column = 0
        for row in range(self.table.rowCount()):
            for column in range(self.table.columnCount()):
                if self.table.item(row, column) and self.table.item(row, column).text():
                    max_column = max(max_column, column)
        # find furthest down row with data
        max_row = 0
        for column in range(self.table.columnCount()):
            for row in range(self.table.rowCount()):
                if self.table.item(row, column) and self.table.item(row, column).text():
                    max_row = max(max_row, row)

        self.table.setRowCount(max_row + 1)
        self.table.setColumnCount(max_column + 1)

        self.adjust_columns()

    def display_table(self):
        num_rows = len(self.data)
        num_cols = len(self.data[0])

        self.table.setRowCount(num_rows)
        self.table.setColumnCount(num_cols)

        for i, row in enumerate(self.data):
            for j, value in enumerate(row):
                item = QTableWidgetItem(value)
                self.table.setItem(i, j, item)

    def get_table_data(self):
        table_data = []
        for i in range(self.table.rowCount()):
            row = []
            for j in range(self.table.columnCount()):
                item = self.table.item(i, j)
                row.append(item.text())
            table_data.append(row)
        return table_data

    def add_row(self):
        num_rows = self.table.rowCount()
        self.table.insertRow(num_rows)
        for j in range(self.table.columnCount()):
            item = QTableWidgetItem('')
            self.table.setItem(num_rows, j, item)
    
    def add_row_at_index(self, index):
        self.table.insertRow(index)
        for j in range(self.table.columnCount()):
            item = QTableWidgetItem('')
            self.table.setItem(index, j, item)

    def add_column(self):
        num_cols = self.table.columnCount()
        self.table.insertColumn(num_cols)
        for i in range(self.table.rowCount()):
            item = QTableWidgetItem('')
            self.table.setItem(i, num_cols, item)
    
    def add_column_at_index(self, index):
        self.table.insertColumn(index)
        for i in range(self.table.rowCount()):
            item = QTableWidgetItem('')
            self.table.setItem(i, index, item)

    def undo(self):
        try:
            last_state = self.undo_cache.pop()
            self.redo_cache.append(last_state)
            self.table = last_state
        except:
            pass
        
    def redo(self):
        try:
            re_state = self.redo_cache.pop()
            self.undo_cache.append(re_state)
            self.table = re_state
        except:
            pass


if __name__ == "__main__":
    app = QApplication(sys.argv)
    csv_editor = CSVEditor()
    csv_editor.show()
    sys.exit(app.exec_())
